#!/usr/bin/env python3

import sys

if __name__ != "__main__":
    print("This script is not meant to be imported.")
    sys.exit(1)

try:
    import subprocess
    from tabulate import tabulate
except ImportError as e:
    print("ImportError: {}".format(e))
    sys.exit(1)


def pkexeec_wrap(command: list[str]) -> list[str]:
    command = [
        "pkexec",
        "--user",
        "root",
        *command,
    ]

    return command


if len(sys.argv) > 1:
    sys.exit(subprocess.call(["usbguard"] + sys.argv[1:]))

output = subprocess.check_output(["usbguard", "list-devices"]).decode("utf-8")

table = []

for output_line in output.split("\n"):
    if output_line == "":
        continue

    split_line = iter(output_line.split(" "))

    temp_split_line = []
    for chunk in split_line:
        if chunk.startswith('"'):
            while not chunk.endswith('"'):
                chunk += " " + next(split_line)

        if chunk.startswith("{"):
            while not chunk.endswith("}"):
                chunk += " " + next(split_line)

        chunk = chunk.replace('"', "")

        temp_split_line.append(chunk)

    split_line = temp_split_line

    parameters = (
        split_line[0].strip(":"),  # no
        split_line[1],  # status
        split_line[3],  # id
        split_line[5],  # serial
        split_line[7],  # name
        # split_line[9],  # hash
        # split_line[11],  # parent-hash
        split_line[13],  # via-port
        # split_line[15],  # with-interface
        split_line[17],  # with-connect-type
    )

    table.append(parameters)

print(
    "\n",
    tabulate(
        table,
        headers=[
            "No",
            "Status",
            "ID",
            "Serial",
            "Name",
            # "Hash",
            # "Parent Hash",
            "Via",
            # "With Interface",
            "Type",
        ],
        colalign=(
            "right",
            "right",
            "left",
            "right",
            # "left",
            # "right",
            "left",
            # "right",
            "right",
            "left",
        ),
    ),
)
